version: '2.2'

networks:
  kong-network:
    name: kong-network
    driver: bridge

services:
  kong-migrations:
    image: kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:2.2.1.0-alpine
    networks:
      - kong-network
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PASSWORD: password
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
    restart: on-failure

  kong-cp:
    image: kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:2.2.1.0-alpine
    networks:
      - kong-network
    user: "${KONG_USER:-kong}"
    volumes:
      - ./ssl-certs:/tmp/ssl/customcerts
    ports:
      - "8001:8001/tcp"
      - "8002:8002/tcp"
      - "8003:8003/tcp"
      - "8004:8004/tcp"
      - "8005:8005/tcp"
      - "8006:8006/tcp"
      - "8100:8100/tcp"
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_PROXY_LISTEN: "off"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_PORTAL_GUI_LISTEN: "0.0.0.0:8003"
      KONG_PORTAL_API_LISTEN: "0.0.0.0:8004"
      KONG_STATUS_LISTEN: "0.0.0.0:8100"
      KONG_CLUSTER_LISTEN: "0.0.0.0:8005"
      KONG_CLUSTER_TELEMETRY_LISTEN: "0.0.0.0:8006"
      KONG_CLUSTER_CERT: /tmp/ssl/customcerts/hybrid/cluster.crt
      KONG_CLUSTER_CERT_KEY: /tmp/ssl/customcerts/hybrid/cluster.key
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_AUDIT_LOG: "on"
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_PORTAL: "on"
      KONG_VITALS: "on"
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
      KONG_LOG_LEVEL: "debug"
      KONG_ENFORCE_RBAC: "off"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  kong-dp:
    image: kong-docker-kong-enterprise-edition-docker.bintray.io/kong-enterprise-edition:2.2.1.0-alpine
    scale: 1
    networks:
      - kong-network
    ports:
      - "8000:8000/tcp"
    volumes:
      - ./ssl-certs:/tmp/ssl/customcerts
    depends_on:
      kong-cp:
        condition: service_healthy
    environment:
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_PORTAL_API_LISTEN: "0.0.0.0:8004"
      KONG_STATUS_LISTEN: "0.0.0.0:8100"
      KONG_DATABASE: "off"
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
      KONG_LOG_LEVEL: "debug"
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_ROLE: data_plane
      KONG_CLUSTER_CERT: /tmp/ssl/customcerts/hybrid/cluster.crt
      KONG_CLUSTER_CERT_KEY: /tmp/ssl/customcerts/hybrid/cluster.key
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  db:
    networks:
      - kong-network
    image: postgres:13.1
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true


  httpbin:
    networks:
      - kong-network
    image: "kennethreitz/httpbin"
    ports:
      - "80:80/tcp"

  echo-server:
    networks:
      - kong-network
    image: "jmalloc/echo-server"
    ports:
      - "8080:8080/tcp"

  dadjokes:
    networks:
      - kong-network
    image: yesinteractive/dadjokes
    ports:
      - "8081:80"

  pgadmin:
    networks:
      - kong-network
    image: dpage/pgadmin4
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - ./pgadmin/config_local.py:/pgadmin4/config_local.py
    environment:
      PGADMIN_DEFAULT_EMAIL: "farhad@konghq.com"
      PGADMIN_DEFAULT_PASSWORD: "password"
      PGADMIN_LISTEN_PORT: 7071
    ports:
     - "7071:7071"
